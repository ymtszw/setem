const { generate, resolvePaths } = require("./index");

describe("generate()", () => {
  const expectation = `-- This module is generated by \`setem\` command. DO NOT edit manually!


module RecordSetter exposing (..)


s_f1 : a -> { b | f1 : a } -> { b | f1 : a }
s_f1 value__ record__ =
    { record__ | f1 = value__ }


s_f2 : a -> { b | f2 : a } -> { b | f2 : a }
s_f2 value__ record__ =
    { record__ | f2 = value__ }


s_f3 : a -> { b | f3 : a } -> { b | f3 : a }
s_f3 value__ record__ =
    { record__ | f3 = value__ }


s_f3_f1 : a -> { b | f3_f1 : a } -> { b | f3_f1 : a }
s_f3_f1 value__ record__ =
    { record__ | f3_f1 = value__ }


s_f3_f2 : a -> { b | f3_f2 : a } -> { b | f3_f2 : a }
s_f3_f2 value__ record__ =
    { record__ | f3_f2 = value__ }
`;

  test("should generate from RecordDefAndExpr", () => {
    expect(generate("src/fixtures/RecordDefAndExpr.elm")).toBe(expectation);
  });
  test("should generate from OnlyRecordDef", () => {
    expect(generate("src/fixtures/OnlyRecordDef.elm")).toBe(expectation);
  });
  test("should generate from OnlyRecordExpr", () => {
    expect(generate("src/fixtures/OnlyRecordExpr.elm")).toBe(expectation);
  });
  test("should generate from InvalidAsModuleFile", () => {
    expect(generate("src/fixtures/InvalidAsModuleFile.elm")).toBe(expectation);
  });
  test("should generate from many files at once", () => {
    expect(
      generate([
        "src/fixtures/RecordDefAndExpr.elm",
        "src/fixtures/OnlyRecordDef.elm",
        "src/fixtures/OnlyRecordExpr.elm",
        "src/fixtures/InvalidAsModuleFile.elm",
      ])
    ).toBe(expectation);
  });

  test("should generate from ExtensibleRecord", () => {
    expect(generate("src/fixtures/ExtensibleRecord.elm"))
      .toBe(`-- This module is generated by \`setem\` command. DO NOT edit manually!


module RecordSetter exposing (..)


s_f1 : a -> { b | f1 : a } -> { b | f1 : a }
s_f1 value__ record__ =
    { record__ | f1 = value__ }


s_f2 : a -> { b | f2 : a } -> { b | f2 : a }
s_f2 value__ record__ =
    { record__ | f2 = value__ }


s_f3 : a -> { b | f3 : a } -> { b | f3 : a }
s_f3 value__ record__ =
    { record__ | f3 = value__ }
`);
  });

  test("should generate from PatternMatch", () => {
    expect(generate("src/fixtures/PatternMatch.elm"))
      .toBe(`-- This module is generated by \`setem\` command. DO NOT edit manually!


module RecordSetter exposing (..)


s_f1 : a -> { b | f1 : a } -> { b | f1 : a }
s_f1 value__ record__ =
    { record__ | f1 = value__ }


s_f2 : a -> { b | f2 : a } -> { b | f2 : a }
s_f2 value__ record__ =
    { record__ | f2 = value__ }


s_f3 : a -> { b | f3 : a } -> { b | f3 : a }
s_f3 value__ record__ =
    { record__ | f3 = value__ }
`);
  });

  test("should generate with options", () => {
    expect(generate("src/fixtures/RecordDefAndExpr.elm", "With"))
      .toBe(`-- This module is generated by \`setem\` command. DO NOT edit manually!


module With exposing (..)


s_f1 : a -> { b | f1 : a } -> { b | f1 : a }
s_f1 value__ record__ =
    { record__ | f1 = value__ }


s_f2 : a -> { b | f2 : a } -> { b | f2 : a }
s_f2 value__ record__ =
    { record__ | f2 = value__ }


s_f3 : a -> { b | f3 : a } -> { b | f3 : a }
s_f3 value__ record__ =
    { record__ | f3 = value__ }


s_f3_f1 : a -> { b | f3_f1 : a } -> { b | f3_f1 : a }
s_f3_f1 value__ record__ =
    { record__ | f3_f1 = value__ }


s_f3_f2 : a -> { b | f3_f2 : a } -> { b | f3_f2 : a }
s_f3_f2 value__ record__ =
    { record__ | f3_f2 = value__ }
`);

    expect(generate("src/fixtures/RecordDefAndExpr.elm", "With", ""))
      .toBe(`-- This module is generated by \`setem\` command. DO NOT edit manually!


module With exposing (..)


f1 : a -> { b | f1 : a } -> { b | f1 : a }
f1 value__ record__ =
    { record__ | f1 = value__ }


f2 : a -> { b | f2 : a } -> { b | f2 : a }
f2 value__ record__ =
    { record__ | f2 = value__ }


f3 : a -> { b | f3 : a } -> { b | f3 : a }
f3 value__ record__ =
    { record__ | f3 = value__ }


f3_f1 : a -> { b | f3_f1 : a } -> { b | f3_f1 : a }
f3_f1 value__ record__ =
    { record__ | f3_f1 = value__ }


f3_f2 : a -> { b | f3_f2 : a } -> { b | f3_f2 : a }
f3_f2 value__ record__ =
    { record__ | f3_f2 = value__ }
`);
  });
});

describe("resolvePaths()", () => {
  const CWD = process.cwd();

  test("should respect explicit file paths", () => {
    expect(resolvePaths(["src/fixtures/RecordDefAndExpr.elm"])).toEqual([
      `${CWD}/src/fixtures/RecordDefAndExpr.elm`,
    ]);

    expect(
      resolvePaths([
        "src/fixtures/RecordDefAndExpr.elm",
        "src/fixtures/PatternMatch.elm",
      ])
    ).toEqual([
      `${CWD}/src/fixtures/RecordDefAndExpr.elm`,
      `${CWD}/src/fixtures/PatternMatch.elm`,
    ]);
  });

  test("should recursively expand directory paths", () => {
    expect(resolvePaths(["src/fixtures/"])).toEqual([
      `${CWD}/src/fixtures/elm-spa-example/src/Api.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Api/Endpoint.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Article.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Article/Body.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Article/Comment.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Article/Feed.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Article/Slug.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Article/Tag.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Asset.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Author.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Avatar.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/CommentId.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Email.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Loading.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Log.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Main.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/Article.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/Article/Editor.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/Blank.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/Home.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/Login.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/NotFound.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/Profile.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/Register.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/Settings.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/PaginatedList.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Profile.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Route.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Session.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Timestamp.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Username.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Viewer.elm`,
      `${CWD}/src/fixtures/elm-spa-example/tests/RoutingTests.elm`,
      `${CWD}/src/fixtures/ExtensibleRecord.elm`,
      `${CWD}/src/fixtures/InvalidAsModuleFile.elm`,
      `${CWD}/src/fixtures/OnlyRecordDef.elm`,
      `${CWD}/src/fixtures/OnlyRecordExpr.elm`,
      `${CWD}/src/fixtures/PatternMatch.elm`,
      `${CWD}/src/fixtures/RecordDefAndExpr.elm`,
    ]);
  });

  test("should enumerate Elm files from directory of elm.json", () => {
    expect(resolvePaths([], "src/fixtures/elm-spa-example/elm.json")).toEqual([
      `${CWD}/src/fixtures/elm-spa-example/src/Api.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Api/Endpoint.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Article.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Article/Body.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Article/Comment.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Article/Feed.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Article/Slug.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Article/Tag.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Asset.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Author.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Avatar.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/CommentId.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Email.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Loading.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Log.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Main.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/Article.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/Article/Editor.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/Blank.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/Home.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/Login.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/NotFound.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/Profile.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/Register.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/Settings.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/PaginatedList.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Profile.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Route.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Session.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Timestamp.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Username.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Viewer.elm`,
    ]);
  });
});
