// NOTE: This test requires Elm dependencies to be fetched beforehand. See `postinstall` in package.json

const {
  generate,
  resolvePaths,
  resolveDependencies,
  getIdentifiersAndEnsureCache,
} = require("./index");

const fs = require("fs");
const path = require("path");
const glob = require("glob");

beforeAll(() => {
  fs.mkdirSync(path.resolve("tmp"), { recursive: true });
});

afterEach(() => {
  glob
    .sync(path.resolve("tmp", "*"))
    .forEach((p) => fs.rmSync(p, { force: true }));
});

describe("generate()", () => {
  const expectation = fs.readFileSync("src/fixtures/minimal-cli-result", {
    encoding: "utf8",
  });

  test("should generate from RecordDefAndExpr", () => {
    expect(generate("src/fixtures/RecordDefAndExpr.elm")).toBe(expectation);
  });
  test("should generate from OnlyRecordDef", () => {
    expect(generate("src/fixtures/OnlyRecordDef.elm")).toBe(expectation);
  });
  test("should generate from OnlyRecordExpr", () => {
    expect(generate("src/fixtures/OnlyRecordExpr.elm")).toBe(expectation);
  });
  test("should generate from InvalidAsModuleFile", () => {
    expect(generate("src/fixtures/InvalidAsModuleFile.elm")).toBe(expectation);
  });
  test("should generate from many files at once", () => {
    expect(
      generate([
        "src/fixtures/RecordDefAndExpr.elm",
        "src/fixtures/OnlyRecordDef.elm",
        "src/fixtures/OnlyRecordExpr.elm",
        "src/fixtures/InvalidAsModuleFile.elm",
      ])
    ).toBe(expectation);
  });

  test("should generate from ExtensibleRecord", () => {
    expect(generate("src/fixtures/ExtensibleRecord.elm"))
      .toBe(`-- This module is generated by \`setem\` command. DO NOT edit manually!


module RecordSetter exposing (..)


s_f1 : a -> { b | f1 : a } -> { b | f1 : a }
s_f1 value__ record__ =
    { record__ | f1 = value__ }


s_f2 : a -> { b | f2 : a } -> { b | f2 : a }
s_f2 value__ record__ =
    { record__ | f2 = value__ }


s_f3 : a -> { b | f3 : a } -> { b | f3 : a }
s_f3 value__ record__ =
    { record__ | f3 = value__ }
`);
  });

  test("should generate from PatternMatch", () => {
    expect(generate("src/fixtures/PatternMatch.elm"))
      .toBe(`-- This module is generated by \`setem\` command. DO NOT edit manually!


module RecordSetter exposing (..)


s_f1 : a -> { b | f1 : a } -> { b | f1 : a }
s_f1 value__ record__ =
    { record__ | f1 = value__ }


s_f2 : a -> { b | f2 : a } -> { b | f2 : a }
s_f2 value__ record__ =
    { record__ | f2 = value__ }


s_f3 : a -> { b | f3 : a } -> { b | f3 : a }
s_f3 value__ record__ =
    { record__ | f3 = value__ }
`);
  });

  test("should generate with options", () => {
    expect(generate("src/fixtures/RecordDefAndExpr.elm", "With"))
      .toBe(`-- This module is generated by \`setem\` command. DO NOT edit manually!


module With exposing (..)


s_f1 : a -> { b | f1 : a } -> { b | f1 : a }
s_f1 value__ record__ =
    { record__ | f1 = value__ }


s_f2 : a -> { b | f2 : a } -> { b | f2 : a }
s_f2 value__ record__ =
    { record__ | f2 = value__ }


s_f3 : a -> { b | f3 : a } -> { b | f3 : a }
s_f3 value__ record__ =
    { record__ | f3 = value__ }


s_f3_f1 : a -> { b | f3_f1 : a } -> { b | f3_f1 : a }
s_f3_f1 value__ record__ =
    { record__ | f3_f1 = value__ }


s_f3_f2 : a -> { b | f3_f2 : a } -> { b | f3_f2 : a }
s_f3_f2 value__ record__ =
    { record__ | f3_f2 = value__ }
`);

    expect(generate("src/fixtures/RecordDefAndExpr.elm", "With", ""))
      .toBe(`-- This module is generated by \`setem\` command. DO NOT edit manually!


module With exposing (..)


f1 : a -> { b | f1 : a } -> { b | f1 : a }
f1 value__ record__ =
    { record__ | f1 = value__ }


f2 : a -> { b | f2 : a } -> { b | f2 : a }
f2 value__ record__ =
    { record__ | f2 = value__ }


f3 : a -> { b | f3 : a } -> { b | f3 : a }
f3 value__ record__ =
    { record__ | f3 = value__ }


f3_f1 : a -> { b | f3_f1 : a } -> { b | f3_f1 : a }
f3_f1 value__ record__ =
    { record__ | f3_f1 = value__ }


f3_f2 : a -> { b | f3_f2 : a } -> { b | f3_f2 : a }
f3_f2 value__ record__ =
    { record__ | f3_f2 = value__ }
`);
  });

  test("should generate with elm.json (dependencies included)", () => {
    const elmJsonFile = "src/fixtures/elm-spa-example/elm.json";
    const sources = resolvePaths([], elmJsonFile);
    const fixture = fs.readFileSync("src/fixtures/elm-spa-example-cli-result", {
      encoding: "utf8",
    });

    expect(generate(sources, "RecordSetter", "s_", elmJsonFile)).toEqual(
      fixture
    );

    // Cache created
    const cacheDir = fs.readdirSync(
      "src/fixtures/elm-spa-example/elm-stuff/setem/cache"
    );
    expect(cacheDir.length).toBeGreaterThanOrEqual(1);
    const cacheFile = path.resolve(
      "src/fixtures/elm-spa-example/elm-stuff/setem/cache",
      cacheDir[0]
    );
    const cache = fs.readFileSync(cacheFile, { encoding: "utf8" });
    expect(cache.split("\n")).toHaveLength(134);

    // Idempotency
    expect(generate(sources, "RecordSetter", "s_", elmJsonFile)).toEqual(
      fixture
    );
  });
});

describe("resolvePaths()", () => {
  const CWD = process.cwd();

  test("should respect explicit file paths", () => {
    expect(resolvePaths(["src/fixtures/RecordDefAndExpr.elm"])).toEqual([
      `${CWD}/src/fixtures/RecordDefAndExpr.elm`,
    ]);

    expect(
      resolvePaths([
        "src/fixtures/RecordDefAndExpr.elm",
        "src/fixtures/PatternMatch.elm",
      ])
    ).toEqual([
      `${CWD}/src/fixtures/RecordDefAndExpr.elm`,
      `${CWD}/src/fixtures/PatternMatch.elm`,
    ]);
  });

  test("should recursively expand directory paths", () => {
    expect(resolvePaths(["src/fixtures/elm-spa-example/src/"])).toEqual([
      `${CWD}/src/fixtures/elm-spa-example/src/Api.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Api/Endpoint.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Article.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Article/Body.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Article/Comment.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Article/Feed.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Article/Slug.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Article/Tag.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Asset.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Author.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Avatar.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/CommentId.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Email.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Loading.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Log.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Main.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/Article.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/Article/Editor.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/Blank.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/Home.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/Login.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/NotFound.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/Profile.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/Register.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/Settings.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/PaginatedList.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Profile.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Route.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Session.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Timestamp.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Username.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Viewer.elm`,
    ]);
  });

  test("should enumerate Elm files from directory of elm.json", () => {
    expect(resolvePaths([], "src/fixtures/elm-spa-example/elm.json")).toEqual([
      `${CWD}/src/fixtures/elm-spa-example/src/Api.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Api/Endpoint.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Article.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Article/Body.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Article/Comment.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Article/Feed.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Article/Slug.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Article/Tag.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Asset.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Author.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Avatar.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/CommentId.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Email.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Loading.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Log.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Main.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/Article.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/Article/Editor.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/Blank.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/Home.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/Login.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/NotFound.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/Profile.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/Register.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Page/Settings.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/PaginatedList.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Profile.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Route.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Session.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Timestamp.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Username.elm`,
      `${CWD}/src/fixtures/elm-spa-example/src/Viewer.elm`,
      `${CWD}/src/fixtures/elm-spa-example/tests/RoutingTests.elm`,
    ]);
  });

  test("should throw if package project is specified", () => {
    expect(() => {
      resolvePaths([], "src/fixtures/elm-test/elm.json");
    }).toThrow();
  });
});

describe("resolveDependencies()", () => {
  const HOME = process.env.HOME;

  test("should properly list all dependency source directories in elm.json", () => {
    expect(
      resolveDependencies("src/fixtures/elm-spa-example/elm.json")
    ).toEqual([
      `${HOME}/.elm/0.19.1/packages/NoRedInk/elm-json-decode-pipeline/1.0.0`,
      `${HOME}/.elm/0.19.1/packages/elm/browser/1.0.0`,
      `${HOME}/.elm/0.19.1/packages/elm/core/1.0.0`,
      `${HOME}/.elm/0.19.1/packages/elm/html/1.0.0`,
      `${HOME}/.elm/0.19.1/packages/elm/http/1.0.0`,
      `${HOME}/.elm/0.19.1/packages/elm/json/1.0.0`,
      `${HOME}/.elm/0.19.1/packages/elm/time/1.0.0`,
      `${HOME}/.elm/0.19.1/packages/elm/url/1.0.0`,
      `${HOME}/.elm/0.19.1/packages/elm-explorations/markdown/1.0.0`,
      `${HOME}/.elm/0.19.1/packages/rtfeldman/elm-iso8601-date-strings/1.1.0`,
      `${HOME}/.elm/0.19.1/packages/elm/parser/1.0.0`,
      `${HOME}/.elm/0.19.1/packages/elm/virtual-dom/1.0.0`,
      `${HOME}/.elm/0.19.1/packages/elm-explorations/test/1.0.0`,
      `${HOME}/.elm/0.19.1/packages/elm/random/1.0.0`,
    ]);
  });

  test("should throw if package project is specified", () => {
    expect(() => {
      resolveDependencies("src/fixtures/elm-test/elm.json");
    }).toThrow();
  });
});

describe("getIdentifiersAndEnsureCache()", () => {
  test("should respect cache", () => {
    const cacheFile = path.resolve("tmp", "cache.txt");
    fs.writeFileSync(cacheFile, "f1\nf2\nf3");
    expect(getIdentifiersAndEnsureCache([], cacheFile)).toEqual([
      "f1",
      "f2",
      "f3",
    ]);
  });

  test("should respect cache even if empty", () => {
    const cacheFile = path.resolve("tmp", "cache.txt");
    fs.writeFileSync(cacheFile, "");
    expect(getIdentifiersAndEnsureCache([], cacheFile)).toEqual([]);
  });

  const HOME = process.env.HOME;
  test("should generate and save cache for a dependency", () => {
    const cacheFile = path.resolve("tmp", "cache.txt");

    // Generates identifiers and save cache, if cache file does not exist
    expect(
      getIdentifiersAndEnsureCache(
        [`${HOME}/.elm/0.19.1/packages/elm/core/1.0.0`],
        cacheFile
      )
    ).toEqual([
      "command",
      "init",
      "nodeList",
      "nodeListSize",
      "subscriptions",
      "tail",
      "update",
    ]);

    expect(fs.readFileSync(cacheFile, { encoding: "utf8" })).toEqual(`command
init
nodeList
nodeListSize
subscriptions
tail
update`);

    // Must be idempotent
    expect(
      getIdentifiersAndEnsureCache(
        [`${HOME}/.elm/0.19.1/packages/elm/core/1.0.0`],
        cacheFile
      )
    ).toEqual([
      "command",
      "init",
      "nodeList",
      "nodeListSize",
      "subscriptions",
      "tail",
      "update",
    ]);

    // Existing cache file is read if specified
    expect(getIdentifiersAndEnsureCache([], cacheFile)).toEqual([
      "command",
      "init",
      "nodeList",
      "nodeListSize",
      "subscriptions",
      "tail",
      "update",
    ]);
  });

  test("should generate and save cache for dependencies in a project (combined with resolveDependencies())", () => {
    const deps = resolveDependencies("src/fixtures/elm-spa-example/elm.json");
    const cacheFile = path.resolve("tmp", "cache.txt");

    // Generates many identifiers from deps
    expect(getIdentifiersAndEnsureCache(deps, cacheFile)).toHaveLength(134);
    // Idempotency
    expect(getIdentifiersAndEnsureCache(deps, cacheFile)).toHaveLength(134);
    // Respect cache
    expect(getIdentifiersAndEnsureCache([], cacheFile)).toHaveLength(134);
  });
});
